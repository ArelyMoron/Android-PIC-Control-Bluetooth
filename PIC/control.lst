CCS PCM C Compiler, Version 5.015, 5967               22-ago.-18 20:51

               Filename:   C:\Users\arely\Documents\programacion\java\android\Mis programas\Proyectos\Control\pic\control.lst

               ROM used:   127 words (2%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           15 (4%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   03C
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #fuses XT, NOWDT 
.................... #use delay(clock = 4M) 
.................... #use fast_io(D) 
.................... #use RS232(BAUD=9600,BITS=8,PARITY=N,XMIT=PIN_C6,RCV=PIN_C7) // habilito el puerto serie del PIC 
.................... // Elaborado por Arely M. 
....................  
.................... /* 
.................... Nota 
.................... El led esta conectado al pin D-1 y el servomotor al pin D-0, 
.................... la señal PWM que ocupo para mover el servomotor la produzco con ayuda del timer0 
.................... */ 
.................... int8 dato, i; 
.................... int dat; 
....................  
.................... void main() 
*
003C:  MOVF   03,W
003D:  ANDLW  1F
003E:  MOVWF  03
003F:  BSF    03.5
0040:  BSF    03.6
0041:  BCF    07.3
0042:  MOVLW  19
0043:  BCF    03.6
0044:  MOVWF  19
0045:  MOVLW  A6
0046:  MOVWF  18
0047:  MOVLW  90
0048:  BCF    03.5
0049:  MOVWF  18
004A:  BSF    03.5
004B:  BSF    03.6
004C:  MOVF   09,W
004D:  ANDLW  C0
004E:  MOVWF  09
004F:  BCF    03.6
0050:  BCF    1F.4
0051:  BCF    1F.5
0052:  MOVLW  00
0053:  BSF    03.6
0054:  MOVWF  08
0055:  BCF    03.5
0056:  CLRF   07
0057:  CLRF   08
0058:  CLRF   09
0059:  BCF    03.7
.................... { 
....................    set_tris_D(0x00); // pongo todos los pines del puerto D como salidas 
005A:  MOVLW  00
005B:  BSF    03.5
005C:  BCF    03.6
005D:  MOVWF  08
....................    output_D(0x00); 
005E:  BCF    03.5
005F:  CLRF   08
....................    enable_interrupts(GLOBAL); 
0060:  MOVLW  C0
0061:  IORWF  0B,F
....................    enable_interrupts(INT_TIMER0); // habilito la interrupcion por timer0 
0062:  BSF    0B.5
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_4); 
0063:  BSF    03.5
0064:  MOVF   01,W
0065:  ANDLW  C0
0066:  IORLW  01
0067:  MOVWF  01
....................    set_TIMER0(235); // pongo la carga del timer 
0068:  MOVLW  EB
0069:  BCF    03.5
006A:  MOVWF  01
....................    dato = 5; // con esta variable controlo el ancho del pulso de la señal que se le envia al servomotor 
006B:  MOVLW  05
006C:  MOVWF  27
....................     
....................    while(1) 
....................    { 
....................       dat = getc(); // obtengo el dato que se envio por bluetooth 
006D:  BTFSS  0C.5
006E:  GOTO   06D
006F:  MOVF   1A,W
0070:  MOVWF  29
....................       if(dat == 1) 
0071:  DECFSZ 29,W
0072:  GOTO   075
....................       { 
....................          output_low(PIN_D1); // apago el led 
0073:  BCF    08.1
....................       } 
0074:  GOTO   07D
....................        
....................       else if(dat == 2) 
0075:  MOVF   29,W
0076:  SUBLW  02
0077:  BTFSS  03.2
0078:  GOTO   07B
....................       { 
....................          output_high(PIN_D1); // enciendo el led 
0079:  BSF    08.1
....................       } 
007A:  GOTO   07D
....................        
....................       else 
....................       { 
....................          dato = dat; // cambio el ancho del pulso de la señal del servomotor 
007B:  MOVF   29,W
007C:  MOVWF  27
....................       } 
007D:  GOTO   06D
....................    } 
.................... } 
....................  
.................... #int_timer0 
.................... void timer0 () // esto se ejecuta cuando se produce la interrupcion por timer0 
007E:  SLEEP
.................... { 
....................    i++; 
*
002F:  INCFSZ 28,F
....................    if(i == 0) 
0030:  GOTO   032
....................    { 
....................       output_high(PIN_D0); 
0031:  BSF    08.0
....................    } 
....................     
....................    if(i == dato) 
0032:  MOVF   27,W
0033:  SUBWF  28,W
0034:  BTFSC  03.2
....................    { 
....................       output_low(PIN_D0); 
0035:  BCF    08.0
....................    } 
....................    set_TIMER0(235); 
0036:  MOVLW  EB
0037:  MOVWF  01
0038:  BCF    0B.2
0039:  BCF    0A.3
003A:  BCF    0A.4
003B:  GOTO   01B
.................... } 

Configuration Fuses:
   Word  1: 2FE1   XT NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
